/**
 * File:
 *	clients/wagon_selfupdate.ycp
 *
 * Module:
 *	Wagon
 *
 * Authors:
 *	Lukas Ocilka <locilka@suse.cz>
 *
 * Summary:
 *	Online Migration Tool
 *
 * $Id$
 *
 */

{
    textdomain "wagon";

    import "GetInstArgs";
    import "Wagon";
    import "FileUtils";
    import "ProductControl";
    import "Internet";
    import "OnlineUpdateCallbacks";
    import "Popup";
    import "Label";

    if (GetInstArgs::going_back()) {
	y2milestone ("Going back...");
	return `back;
    }

    Wagon::InitPkg();

    list <map <string, any> > products = Pkg::ResolvableProperties ("", `product, "");
    y2milestone ("All known products: %1", products);

    symbol ret = `auto;

    // Here the update stack updates itself
    integer selected = Pkg::ResolvablePreselectPatches (`affects_pkg_manager);

    if (selected < 1) {
	y2milestone ("There are no patches that would affect the package manager");
	return ret;
    }

    boolean solved = nil;

    while (solved != true) {
	// Trying to solve automatically
	solved = Pkg::PkgSolve (false);
	symbol ret_sel = nil;

	// PkgSolve didn't report any problem
	if (solved) {
	    // FIXME: inform user?
	    ret = `restart_same_step;
	// There are some issues in selecting the patches
	} else {
	    repeat {
		// Try to solve them manually
		UI::OpenDialog(`opt(`defaultsize), `PackageSelector (`id(`selector), `opt(`youMode)));
		ret_sel = (symbol) UI::RunPkgSelection (`id(`selector));
		UI::CloseDialog();

		// Cannot or don't want to accept the proposal
		if (ret_sel == `cancel) {
		    // Confirmed
		    if (Popup::AnyQuestion (
			// TRANSLATORS: headline
			_("Aborting the Upgrade"),
			// TRANSLATORS: pop-up question
			_("Cannot continue without installing the required patches.
Are sure you want to abort the upgrade process?"),
			_("Abort Upgrade"),
			Label::NoButton(),
			`yes_button
		    )) {
			ret = `abort;
		    // Try again
		    } else {
			continue;
		    }
		// Solved manually
		} else if (ret_sel == `accept) {
		    ret = `restart_same_step;
		}
	    } until (ret_sel == `cancel || ret_sel == `accept);
	}

	if (! Wagon::AcceptLicenses()) {
	    y2warning ("Some license(s) have been rejected, running solver again");
	    solved = nil;
	}
    }

    OnlineUpdateCallbacks::RegisterOnlineUpdateCallbacks();
    WFM::call ("online_update_install");

    return ret;
}
