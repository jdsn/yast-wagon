/**
 * File:	modules/Wagon.ycp
 * Package:	WAGON
 * Summary:	Functions and handlers for WAGON
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 * Internal
 *
 * $Id$
 *
 * Module for handling WAGON.
 *
 */

{
    module "Wagon";

    textdomain "wagon";

    import "Installation";
    import "PackageCallbacks";
    import "CommandLine";
    import "Mode";
    import "Stage";
    import "Directory";
    import "XML";
    import "ProductControl";
    import "Popup";
    import "Label";
    import "Report";
    import "ProductFeatures";
    import "Update";

    boolean running_by_applet = false;

    string update_workflow_type = "manual";

    global void SetUpdateWorkflow (string new_update_workflow_type) {
	// FIXME: check

	y2milestone ("New workflow type: %1", new_update_workflow_type);
	update_workflow_type = new_update_workflow_type;
    }

    global string GetUpdateWorkflow () {
	return update_workflow_type;
    }

    void ResetWorkflowSteps () {
	ProductControl::UnDisableAllModulesAndProposals (Mode::mode(), Stage::stage());
    }

    global boolean AdjustWizardSteps () {
	// Adjusting the steps this way:
	//   * Disable all steps
	//   * Enable only the requierd ones

	ResetWorkflowSteps();

	ProductControl::DisableAllModulesAndProposals (Mode::mode(), Stage::stage());

	list <map <string, any> > subworkflows =
	    (list <map <string, any> >) ProductFeatures::GetFeature ("globals", "subworkflows");

	boolean found = false;

	foreach (map <string, any> one_subworkflow, subworkflows, {
	    if (one_subworkflow["name"]:"" == update_workflow_type) {
		list <string> modules = (list <string>) one_subworkflow["modules"]:[];
		y2milestone ("Modules: %1", modules);

		if (modules != nil && modules != []) {
		    foreach (string one_module, modules, {
			ProductControl::EnableModule (one_module);
		    });
		}

		list <string> proposals = (list <string>) one_subworkflow["proposals"]:[];
		y2milestone ("Proposals: %1", proposals);

		if (proposals != nil && proposals != []) {
		    foreach (string one_proposal, proposals, {
			ProductControl::EnableProposal (one_proposal);
		    });
		}

		found = true;
		break;
	    }
	});

	if (found != true) {
	    y2error ("Unknown workflow: %1", update_workflow_type);
	    y2milestone ("Known workflows: %1", subworkflows);
	    // TRANSLATORS: error message
	    Report::Error (_("No workflow defined."));
	    return false;
	}

	list<map> stage_mode = [
	    $[
		"stage" : Stage::stage(),
		"mode" : Mode::mode()
	    ]
	];

	y2milestone ("Updating wizard steps: %1, Disabled modules: %2, Disabled proposals: %3",
	    stage_mode, ProductControl::GetDisabledModules(), ProductControl::GetDisabledProposals());
	ProductControl::UpdateWizardSteps (stage_mode);

	return true;
    }

    /**
     * Initializes internal variables used later
     *
     * @param map <string, any> commands as got from CommandLine::Parse()
     * @see CommandLine module
     */
    global void Init (map <string, any> commands) {
	if (haskey (commands, "command")) {
	    if (commands["command"]:"" == "cd_update") {
		// Backward compatibility
		commands["command"] = "PatchCD";
	    }

	    y2milestone ("Starting workflow defined: %1", commands["command"]:"");
	    SetUpdateWorkflow (commands["command"]:"");
	} else {
	    string default_subworkflow = ProductFeatures::GetStringFeature ("globals", "default_subworkflow");

	    if (default_subworkflow == nil || default_subworkflow == "") default_subworkflow = "manual";
	    y2milestone ("Using default workflow: %1", default_subworkflow);
	}

	AdjustWizardSteps();
    }

    /**
     * Initializes the package manager
     */
    global boolean InitPkg () {
	if (Pkg::TargetInitialize (Installation::destdir) != true) {
	    y2error ("Cannot initialize target");
	    return false;
	}

	if (Pkg::TargetLoad() != true) {
	    y2error ("Cannot load target");
	    return false;
	}

	if (Pkg::SourceStartManager (true) != true) {
	    y2error ("Cannot initialize sources");
	    return false;
	}

	// FIXME: what's missing here?

	return true;
    }

    /**
     * Processes the command-line parameters and prints
     * an appropriate command-line output.
     *
     * @param map <string, any> commands as got from CommandLine::Parse()
     * @see CommandLine module
     */
    global void ProcessCommandLine (map <string, any> commands) {
	Mode::SetUI ("commandline");

	if (commands["command"]:"" == "help" || commands["command"]:"" == "longhelp") {
	    CommandLine::Print(_("
This module does not support command-line interface.
To do so, please, use zypper instead.
"));
	} else if (commands["command"]:"" == "xmlhelp") {
	    if (! haskey (commands["options"]:$[], "xmlfile")) {
		CommandLine::Print(_("Target file name ('xmlfile' option) is missing. Use xmlfile=<target_XML_file> command line option."));
	    } else {
		map doc = $[];

		doc["listEntries"] = $[
		    "commands": "command",
		    "options": "option",
		    "examples": "example",
		];

		doc["systemID"] = Directory::schemadir + "/commandline.dtd";
		doc["typeNamespace"] = "http://www.suse.com/1.0/configns";
		doc["rootElement"] = "commandline";
		XML::xmlCreateDoc(`xmlhelp, doc);

		map exportmap = $[
		    "module" : "wagon",
		];

		XML::YCPToXMLFile(`xmlhelp, exportmap, commands["options", "xmlfile"]:"");
		y2milestone("exported XML map: %1", exportmap);
	    }
	}
    }

    /**
     * Goes through all selected packages one by one a check licenses to confirm.
     * These licenses are requested to be accepted by user. If user declines any
     * of them, a respective package is set to 'Taboo' and new solver run is
     * required.
     *
     * @return boolean whether all licenses have been accepted
     */
    global boolean AcceptLicenses () {
	boolean accepted = true;

	foreach (string p, Pkg::GetPackages (`selected, true), {
	    string license = Pkg::PkgGetLicenseToConfirm (p);

	    if (license != nil && license != "") {
		if (license != nil && license != "") {
		    string rt_license = sformat ("<p><b>%1</b></p>\n%2", p, license);

		    if (! Popup::AnyQuestionRichText (
			// popup heading, with rich text widget and Yes/No buttons
			_("Do you accept this license agreement?"),
			rt_license,
			70, 20,
			Label::YesButton (), Label::NoButton (),
			`focus_none
		    )) {
			y2milestone("License not accepted: %1", p);
			Pkg::PkgTaboo (p);
			accepted = false;
		    } else {
			Pkg::PkgMarkLicenseConfirmed (p);
		    }
		}
	    }
	});

	return accepted;
    }

    map <string, any> GetUpdateConf () {
	map <string, boolean> ret = $[];

	boolean sdp = Update::SilentlyDowngradePackages();
	if (sdp != nil) {
	    ret["silent_downgrades"] = sdp;
	}

	y2milestone ("Using update configuration: %1", ret);

	return ret;
    }

    boolean already_proposed = false;

    global void ResetDUPProposal () {
	already_proposed = false;
    }

    global boolean ProposeDUP () {
	if (already_proposed == true) {
	    y2milestone ("DUP already proposed");
	    return true;
	}

	map <string, any> update_conf = GetUpdateConf();

	map <symbol, integer> update_sum = Pkg::PkgUpdateAll (update_conf);
	y2milestone ("Update configuration: %1, update summary: %2", update_conf, update_sum);

	already_proposed = true;

	return true;
    }

    global map <string, any> ProposalSummary () {
	map <string, any> ret = $[];

	// FIXME: create a useful summary
	ret = $[
	    "preformatted_proposal" : "<ul><li>" + _("Distribution Upgrade") + "</li></ul>",
	    "help" : _("<p>FIXME</p>"),
	];

	return ret;
    }

/* EOF */
}
