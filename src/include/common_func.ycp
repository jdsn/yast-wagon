/**
 * File:
 *	include/wagon/common_func.ycp
 *
 * Module:
 *	Wagon
 *
 * Authors:
 *	Lukas Ocilka <locilka@suse.cz>
 *
 * Summary:
 *	Online Migration Tool
 *
 * $Id$
 *
 */

{
    textdomain "wagon";

    import "Label";
    import "Popup";
    import "PackagesUI";
    import "Wagon";
    import "Wizard";
    import "GetInstArgs";

    boolean SolverRunWithFeedback () {
	UI::OpenDialog (`Label (_("Solving the package dependencies...")));
	boolean ret = Pkg::PkgSolve (true);
	UI::CloseDialog();

	return ret;
    }

    symbol SolveDependencies () {
	symbol ret = `auto;

	boolean solved = nil;

	while (solved != true) {
	    // Trying to solve automatically
	    solved = SolverRunWithFeedback();
	    symbol ret_sel = nil;

	    // PkgSolve didn't report any problem
	    if (solved == true) {
		y2milestone ("Solved automatically");
		ret = `auto;
	    // There are some issues in selecting the patches
	    } else {
		y2milestone ("Cannot be solved automatically");
		while (true) {
		    // Try to solve them manually
		    ret_sel = PackagesUI::RunPackageSelector ($["mode":`summaryMode]);

		    // Cannot or don't want to accept the proposal
		    if (ret_sel == `cancel) {
			// Confirmed
			if (Popup::AnyQuestion (
			    // TRANSLATORS: headline
			    _("Aborting the Upgrade"),
			    // TRANSLATORS: pop-up question
			    _("Cannot continue without installing the required patches.
Are sure you want to abort the upgrade process?"),
			    _("Abort Upgrade"),
			    Label::NoButton(),
			    `yes_button
			)) {
			    ret = `abort;
			    break;
			// Try again
			} else {
			    continue;
			}
		    // Solved manually
		    } else if (ret_sel == `accept) {
			ret = `auto;
			solved = true;
			break;
		    }
		}
	    }

	    if (ret == `abort) {
		solved = nil;
		y2warning ("Aborting...");
		break;
	    }

	    if (! Wagon::AcceptLicenses()) {
		y2warning ("Some license(s) have been rejected, running solver again");
		solved = nil;
	    }
	}

	return ret;
    }

    void ResetPackager () {
	Wizard::SetContents (
	    _("Reseting Package Manager"),
	    `Label(_("Reseting package manager...")),
	    "",
	    false, true
	);

	y2milestone ("Reseting Pkg");
	Pkg::PkgApplReset();
	Pkg::PkgReset();

	symbol status = nil;
	string name = nil;

	y2milestone ("Neutralizing all resolvables");
	foreach (symbol resolvable, [`pattern, `patch, `package, `product, `srcpackage], {
	    Pkg::ResolvableNeutral ("" /* all */, resolvable, true /* force */);
	});

	y2milestone ("Running solver");
	Pkg::PkgSolve (true);

	Pkg::TargetFinish();
	Pkg::SourceFinishAll();

	Wagon::InitPkg();
	Pkg::PkgSolve (true);
    }

    integer FindRepoIdByAlias (string repo_alias) {
	integer repo_id = nil;

	map one_repo = $[];

	foreach (integer repo_id_to_check, Pkg::SourceGetCurrent (false /* all repos */), {
	    one_repo = Pkg::SourceGeneralData (repo_id_to_check);

	    if (one_repo["alias"]:"" == repo_alias) {
		repo_id = repo_id_to_check;
		break;
	    }
	});

	return repo_id;
    }

    /**
     * During the first (migration) registration, it's not needed to include
     * the optional data as it is also faster but after the migration, it's
     * better to to include them.
     * @see #BNC 576553
     */
    void AdjustSuseRegisterDefaults () {
	map argmap = GetInstArgs::argmap();

	if (argmap["suse_register_defaults"]:"" == "none") {
	    y2milestone (
		"suse_register: no optional data selected by default (%1/%2/%3)",
		SCR::Write (.sysconfig.suse_register.SUBMIT_OPTIONAL, "false"),
		SCR::Write (.sysconfig.suse_register.SUBMIT_HWDATA, "false"),
		SCR::Write (.sysconfig.suse_register, nil)
	    );
	} else if (argmap["suse_register_defaults"]:"" == "selected") {
	    y2milestone (
		"suse_register: all optional data selected by default (%1/%2/%3)",
		SCR::Write (.sysconfig.suse_register.SUBMIT_OPTIONAL, "true"),
		SCR::Write (.sysconfig.suse_register.SUBMIT_HWDATA, "true"),
		SCR::Write (.sysconfig.suse_register, nil)
	    );
	} else {
	    y2warning ("Undefined how to handled suse_register optional data");
	}
    }
}
